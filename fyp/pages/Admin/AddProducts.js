import React, { useState } from "react";
import PropTypes from "prop-types";
import Head from "next/head";
import { ThemeProvider } from "@mui/material/styles";
import CssBaseline from "@mui/material/CssBaseline";
import { CacheProvider } from "@emotion/react";
import theme from "../../src/theme/theme";
import createEmotionCache from "../../src/createEmotionCache";
import FullLayout from "../../src/layouts/FullLayout";
import PhotoCamera from "@mui/icons-material/PhotoCamera";
import BaseCard from "../../src/components/baseCard/BaseCard";
import Preview from "../../components/product/Preview";
import {
  Grid,
  Stack,
  TextField,
  InputLabel,
  NativeSelect,
  FormControl,
  IconButton,
  Button,
} from "@mui/material";

const clientSideEmotionCache = createEmotionCache();

const Products = (props) => {
  //   const router = router();
  const [image, setImage] = useState(null);
  const [createObjectURL, setCreateObjectURL] = useState(null);
  const { emotionCache = clientSideEmotionCache, pageProps } = props;
  const [Product, setProduct] = useState({
    title: "",
    slug: "",
    desc: "",
    price: "",
    color: "",
    availableQty: "",
    size: "",
    category: "",
    img: "",
  });

  const onChange = (e) => {
    setProduct({ ...Product, [e.target.name]: e.target.value });
    // console.log(Product)
  };

  const onSubmit = async (e) => {
    e.preventDefault();
    let res = await fetch(`${process.env.NEXT_PUBLIC_HOST}/api/Product/add`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        authorization: JSON.stringify(localStorage.getItem("token")),
      },
      body: JSON.stringify(Product),
    });
    let response = await res.json();
    console.log(response);
  };

  const uploadToClient = (event) => {
    if (event.target.files && event.target.files[0]) {
      const i = event.target.files[0];

      setImage(i);
      setCreateObjectURL(URL.createObjectURL(i));
    }
  };

  const uploadToServer = async (event) => {
    const form = new FormData();
    console.log("file", image);
    form.append("file", image);
    let response = await fetch(
      `${process.env.NEXT_PUBLIC_HOST}/api/Product/upload`,
      {
        method: "POST",
        body: form,
        "content-type": "multipart/form-data",
      }
    );
    response = await response.json();
    console.log(response);
    setProduct({ ...Product, ["img"]: response.filename });
  };

  return (
    <CacheProvider value={emotionCache}>
      <Head>
        <title>Add Products</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.ico" />
      </Head>
      <ThemeProvider theme={theme}>
        <CssBaseline>
          <FullLayout>
            <Grid container spacing={0}>
              <Grid item xs={12} lg={12}>
                <BaseCard title="Add Product">
                  <Stack spacing={3}>
                    <TextField
                      name="productName"
                      value={Product.productName}
                      onChange={onChange}
                      id="product-title"
                      label="Product title"
                      variant="outlined"
                    />
                    <TextField
                      name="slug"
                      value={Product.slug}
                      onChange={onChange}
                      id="slug"
                      label="slug"
                      variant="outlined"
                    />

                    <TextField
                      name="productDesc"
                      value={Product.productDesc}
                      onChange={onChange}
                      id="product-description"
                      label="Enter product description."
                      multiline
                      rows={4}
                    />
                  </Stack>
                </BaseCard>
              </Grid>

              <Grid item xs={12} lg={12}>
                <BaseCard title="Product varinets">
                  <Stack spacing={4} direction="row">
                    <TextField
                      id="Price"
                      name="price"
                      value={Product.price}
                      onChange={onChange}
                      label="Rs."
                      variant="standard"
                    />
                    <TextField
                      id="Color"
                      name="color"
                      value={Product.color}
                      onChange={onChange}
                      label="Color"
                      variant="standard"
                    />
                    <TextField
                      id="AvailableQuantity"
                      name="availableQty"
                      value={Product.availableQty}
                      onChange={onChange}
                      label="Available Quantity"
                      variant="standard"
                    />
                    <FormControl>
                      <InputLabel
                        variant="standard"
                        htmlFor="uncontrolled-native"
                      >
                        Size
                      </InputLabel>
                      <NativeSelect
                        name="size"
                        value={Product.size}
                        onChange={onChange}
                        inputProps={{
                          name: "size",
                          id: "uncontrolled-native",
                        }}
                      >
                        <option value={""}></option>
                        <option value={"SM"}>SM</option>
                        <option value={"LG"}>LG</option>
                        <option value={"XL"}>XL</option>
                        <option value={"XXL"}>XXL</option>
                      </NativeSelect>
                    </FormControl>
                    <FormControl>
                      <InputLabel
                        variant="standard"
                        htmlFor="uncontrolled-native"
                      >
                        Category
                      </InputLabel>
                      <NativeSelect
                        name="category"
                        value={Product.category}
                        onChange={onChange}
                        defaultValue={""}
                        inputProps={{
                          name: "category",
                          id: "uncontrolled-native",
                        }}
                      >
                        <option value={""}></option>
                        <option value={"T-Shirt"}>T-Shirt</option>
                        <option value={"Hoddies"}>Hoddies</option>
                        <option value={"Mugs"}>Mugs</option>
                        <option value={"Stickers"}>Stickers</option>
                      </NativeSelect>
                    </FormControl>

                    <IconButton
                      color="primary"
                      aria-label="upload picture"
                      component="label"
                    >
                      <input
                        hidden
                        accept="image/*"
                        type="file"
                        onChange={uploadToClient}
                      />
                      <PhotoCamera />
                    </IconButton>
                  </Stack>
                  <br />
                  <Button onClick={uploadToServer} variant="contained">
                    Upload
                  </Button>
                  <Button onClick={onSubmit} variant="contained">
                    Add product
                  </Button>
                </BaseCard>
              </Grid>
              <Grid item >
                <BaseCard title="Preview of product">
                  <Preview Product={Product} />
                </BaseCard>
              </Grid>
            </Grid>
          </FullLayout>
        </CssBaseline>
      </ThemeProvider>
    </CacheProvider>
  );
};

export default Products;

Products.propTypes = {
  // Component: PropTypes.elementType.isRequired,
  emotionCache: PropTypes.object,
  //   pageProps: PropTypes.object.isRequired,
};
